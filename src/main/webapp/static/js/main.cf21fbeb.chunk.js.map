{"version":3,"sources":["pages/HomePage.js","pages/ScheduleActivityPage.js","Routes.js","constants/Navbar.js","App.js","registerServiceWorker.js","index.js"],"names":["HomePage","React","useState","updateActivity","className","onChange","evt","target","value","ScheduleActivityPage","label","size","inputProps","placeholder","Routes","Component","render","exact","path","component","Navbar","isLoggedIn","updateIsLoggedIn","clientID","discoveryDocs","scope","role","aria-label","href","aria-expanded","data-target","aria-hidden","id","clientId","renderProps","onClick","disabled","onLogoutSuccess","res","onFailure","cookiePolicy","onSuccess","console","log","App","style","marginTop","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.cf21fbeb.chunk.js","sourcesContent":["import React from 'react';\n\nimport 'bulma/css/bulma.css';\nimport '../css/home.css';\n\n/* Component for home page */\nconst HomePage = () => {\n\n  // Create state for activity selection with Games as default\n  const [activity, updateActivity] = React.useState(\"games\");\n\n  // Update activty selection state based on dropdown\n  const handleActivitySelection = evt => {\n    updateActivity(evt.target.value);\n  }\n\n  return (\n    <section className=\"section\">\n\n      {/*This container consists of the activities dropdown. */}\n      <div className=\"container has-text-centered\">\n        <div className=\"control is-centered\">\n          <div className=\"select is-info is-fullwidth title is-2\">\n            <select className=\"is-focused\" onChange={handleActivitySelection}>\n              <option value=\"games\">{\"Games\"}</option>\n              <option value=\"active\">{\"Active\"}</option>\n              <option value=\"reading\">{\"Reading\"}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <br />\n\n      {/* This container consists of the buttons to schedule and browse. */}\n      <div className=\"container has-text-centered is-centered\">\n        <button className=\"button is-large is-success is-rounded\">Schedule an event</button>\n        <button className=\"button is-large is-danger is-rounded\">Browse</button>\n      </div>\n    </section>\n  )\n}\n\nexport default HomePage;\n","import React from 'react';\nimport { MDBInput } from \"mdbreact\";\nimport Datetime from \"react-datetime\";\n\nimport 'react-datetime/css/react-datetime.css';\n\n/* Component for the schedule activity page */\nconst ScheduleActivityPage = () => {\n  return (\n    <div className=\"container py-5\">\n      <h1 className=\"text-center\">Schedule Activity</h1>\n      {/* Title input */}\n      <MDBInput label=\"Add Title\" size=\"lg\" />\n      <br />\n      {/* Datetime selection */}\n      <div className=\"row\">\n        <div className=\"col-6\">\n         <Datetime inputProps={{placeholder: 'Start Time'}} />\n        </div>\n        <div className=\"col-6\">\n         <Datetime inputProps={{placeholder: 'End Time'}} />\n        </div>\n      </div>\n      <br />\n      {/* Button to specify not repeating event. */}\n      <button className=\"btn btn-outline-primary\">Does not Repeat</button>\n    </div>\n  )\n}\n\nexport default ScheduleActivityPage;\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\nimport HomePage from './pages/HomePage';\r\nimport ScheduleActivityPage from './pages/ScheduleActivityPage';\r\n\r\n/* Routes address bar to corresponding page components */\r\nclass Routes extends React.Component {\r\n  render() {\r\n    return (\r\n      <Switch>\r\n        <Route exact path='/' component={HomePage} />\r\n        <Route exact path='/schedule-activity' component={ScheduleActivityPage} />\r\n        \r\n        <Route\r\n          render={function() {\r\n            return <h1>Not Found</h1>;\r\n          }}\r\n        />\r\n      </Switch>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Routes;\r\n","import React from 'react';\nimport {GoogleLogin, GoogleLogout} from 'react-google-login'\n\nimport 'bulma/css/bulma.css';\n\n/* Component for web app navigation bar */\nconst Navbar = () => {\n  // Create state for login/logout status\n  const [isLoggedIn, updateIsLoggedIn] = React.useState(false);\n\n  // Initialize google auth api information\n  const clientID = \"298755462-7fnqhho2db1b0mb5i6o7irgg8v7om76g.apps.googleusercontent.com\";\n  const discoveryDocs = \"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\";\n  const scope = \"https://www.googleapis.com/auth/calendar\";\n\n  // Handle successful login\n  const handleLogin = (res) => {\n    updateIsLoggedIn(true);\n    console.log(res);\n  }\n\n  // Handle successful logout\n  const handleLogout = (res) => {\n    updateIsLoggedIn(false);\n  }\n\n  // Handle failed login\n  const handleLoginFail = (res) => {}\n\n  // Handle failed logout\n  const handleLogoutFail = (res) => {}\n  \n  return (\n    <nav className=\"navbar is-spaced is-dark\" role=\"navigation\" aria-label=\"main navigation\"> \n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <a className=\"navbar-item\" href=\"index.html\"> WeTime <i className=\"fas fa-heartbeat\"></i></a>\n          \n          <a role=\"button\" className=\"navbar-burger burger\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\">\n            <span aria-hidden=\"true\"></span>\n            <span aria-hidden=\"true\"></span>\n            <span aria-hidden=\"true\"></span>\n          </a>\n        </div>\n\n        {/*Navbar tabs to other pages.*/}\n        <div id=\"navbarBasicExample\" className=\"navbar-menu\">\n          <div className=\"navbar-start\">\n            <a className=\"navbar-item\"><span className=\"icon\"><i className=\"fas fa-question-circle\"></i></span><span> Help </span></a>\n            <a className=\"navbar-item\"><span className=\"icon\"><i className=\"fas fa-address-card\"></i></span><span> About</span></a> \n          </div>\n        </div>\n\n        {/*The login and log out button. Changes according to signed in status. Handled in js just below.*/}\n        <div className=\"navbar-end\">\n          <div className=\"navbar-item\">\n            <div className=\"buttons\">\n            {/* Display login or logout button depending on loggedIn status */}\n            { !isLoggedIn ?\n              <GoogleLogin\n                clientId={clientID}\n                render={renderProps => (\n                  <button onClick={renderProps.onClick} disabled={renderProps.disabled} className=\"button is-info\" id=\"authorize_button\">\n                    <i className=\"fab fa-google fa-fw\"></i>Login with Google\n                  </button>\n                )}\n                onSuccess={handleLogin}\n                onFailure={handleLoginFail}\n                discoveryDocs={discoveryDocs}\n                scope={scope}\n                cookiePolicy={'single_host_origin'}\n              />\n              :\n              <GoogleLogout\n                clientId={clientID}\n                render={renderProps => (\n                  <button onClick={renderProps.onClick} disabled={renderProps.disabled} className=\"button is-primary\" id=\"signout_button\">\n                    <i className=\"fas fa-sign-out-alt fa-fw\"></i>Logout\n                  </button>\n                )}\n                onLogoutSuccess={handleLogout}\n                onFailure={handleLogoutFail}\n                discoveryDocs={discoveryDocs}\n                scope={scope}\n                cookiePolicy={'single_host_origin'}\n              /> }\n            </div>\n          </div>\n        </div>\n      </div>\n    </nav>\n  )\n}\n\nexport default Navbar;\n","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport Routes from './Routes';\r\nimport Navbar from './constants/Navbar';\r\n\r\n/* Component for entire application */\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Navbar />\r\n        <main style={{ marginTop: '4rem' }}>\r\n          <Routes />\r\n        </main>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport App from \"./App\";\r\n\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render( <App /> , document.getElementById('root'));\r\n\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}